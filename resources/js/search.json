[[{"i":"#","p":["This documentation page is still a work in progress and may contain outdated information."]},{"l":"LuaLink v2","p":["LuaLink is an experimental plugin that provides a basic Lua scripting runtime for Paper-based Minecraft servers. It is designed for small and simple tasks and serves as a much more powerful alternative to Skript and other scripting plugins.","Scripting runtime is based on LuaJava with LuaJIT. For more details on implementation specifics or differences, please refer to their respective documentation."]},{"l":"Features","p":["Quick and easy scripting with Lua syntax.","Full access to Bukkit API, built-in libraries and loaded plugins.","Create your own or load external Java and Lua(work in progress) libraries.","Loading and unloading of Lua scripts at runtime.","Built-in utilities to simplify common tasks."]},{"l":"Installation","p":["Before you begin, make sure you have met the following requirements:","Paper based server running 1.20 or higher, and Java 21.","Basic understanding of Lua scripting and general programming concepts is beneficial.","Plugin can be downloaded from following sources:","Modrinth (modrinth.com)","Hangar (hangar.papermc.io)","GitHub Releases (github.com)"]},{"l":"Quick Start","p":["After you have installed the plugin, you can start writing your first script.","Script life-cycle can be managed using /lualink load, /lualink unload and /lualink reload commands.","Each script is stored in a separate folder inside the plugins/LuaLink/scripts directory.","Entry point of the script is a file named main.lua.","It's quite simple, isn't it? For this particular case, we can simplify it even further by extracting the logic away from the onLoad block.","Want to do something more complex? More information on how to write scripts can be found on the Getting Started page."]}],[{"l":"Getting Started","p":["This page contains a basic introduction to writing Lua scripts with LuaLink.","It is important to know the basics of Java programming and Bukkit API because this is how you will interact with the Minecraft server.","Basic Lua knowledge is an obvious prerequisite, but it should be relatively easy to pick up assuming you have some experience with programming.","Lua (devdocs.io)","Java 21 (devdocs.io)","Paper Docs (docs.papermc.io)","Paper Javadocs (jd.papermc.io)","Navigation","1. Creating Scripts","2. Script Life-cycle","3. Importing and Requiring","4. Constructors and Instances","5. Commands","6. Events","7. Scheduler"]},{"l":"Creating Scripts","p":["There are a couple of things to keep in mind when using LuaLink.","Each script is stored in a separate folder inside the plugins/LuaLink/scripts directory. For example /plugins/LuaLink/scripts/example/main.lua will be loaded as example script.","Script life-cycle can be managed using /lualink command. Full command reference is available on the Commands page.","Entry point of the script is a file named main.lua. More files can be imported using the require keyword."]},{"l":"Script Life-cycle","p":["Scripts are automatically loaded after server has been fully started. They can also be loaded, unloaded or reloaded manually using commands."]},{"l":"Importing and Requiring","p":["Each referenced Java class must be imported using the import keyword.","Each referenced Lua class or library, must be required using the require keyword."]},{"l":"Constructors and Instances","p":["New instances of Java classes can be created as follows."]},{"l":"Commands","p":["Non-complex commands can be created with little effort using built-in API."]},{"l":"Events","p":["Bukkit events can be hooked into relatively easily."]},{"l":"Scheduler","p":["Scheduler can be used to register single-use, delayed or repeating tasks.","Tasks can also be run asynchronously, but please note that neither the Bukkit API nor the LuaLink API is guaranteed to be thread-safe."]}],[{"l":"Commands","p":["/lualink list","/lualink load (script)","/lualink reload (script)","/lualink unload (script)","Command","Description","List of all commands and permissions provided by LuaLink.","Lists all loaded Lua scripts.","Loads specified Lua script.","lualink.command.list","lualink.command.load","lualink.command.reload","lualink.command.unload","Permission","Please be cautious and give access to these commands only to people you trust.","Reloads specified Lua script.","Unloads specified Lua script."]}],[{"l":"Dependencies","p":["LuaLink provides a way to access and use plugins' APIs in your scripts. This feature is very powerful and makes it easy to integrate scripts with other plugins. It must be noted this has not been thoroughly tested yet and some issues may arise. Please be cautious when using this feature.","Current implementation, despite being relatively simple and fully functional, is still marked as experimental. We may introuduce breaking changes to the way dependencies are declared and exposed to scripts."]},{"l":"Using Dependencies","p":["Importing any class that belongs to an installed plugin should work out of the box. In this example we will use PlaceholderAPI, a plugin you should be already familiar with.","Assuming the plugin is installed and enabled on the server, we should be able to call its API like any other function.","That's it. As mentioned earlier, current implementation is really simple and should just work."]}],[{"l":"Libraries","p":["LuaLink provides a way to load external Java libraries for use in your scripts, as well as to define and use external Lua libraries."]},{"l":"Java Libraries","p":["External Java/Kotlin libraries can be added by configuring the /plugins/LuaLink/libraries.json file. Dependencies will be downloaded and exposed to the scripting runtime after server restart."]},{"l":"Configuration Example","p":["In this example, we are adding PaperLib library of version 1.0.7 from PaperMC repository. You can also see how and authenticate with a private repository using credentials, which might be essential when working with closed-source projects or GitHub Packages.","After restarting the server, we should be able to import and access any class that belongs to specified library(-ies).","While this example may not be the best use of PaperLib- especially because LuaLink requires you to run the plugin on Paper- it is still a good example of how to use external libraries in your scripts."]}],[{"l":"Reference"},{"l":"Core Components","p":["assert","Core Functions","Core Libraries","error","io","ipairs","java","Libraries and utilities exposed to the script environment.","math","next","os","pairs","pcall","require","select","string","table","tonumber","tostring","type","unpack"]},{"l":"Script","p":["Main script class available in the global scope of each script. Provides access to various utilities."]},{"l":"Scheduler","p":["Provides methods to schedule and manage tasks. It supports both synchronous and asynchronous task execution with various timing options."]}]]