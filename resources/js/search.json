[[{"i":"#","p":["This documentation page is still a work in progress and may contain outdated information."]},{"l":"LuaLink v2","p":["LuaLink is an experimental plugin that provides a basic Lua scripting runtime for Paper-based Minecraft servers. It is designed for small and simple tasks and serves as a much more powerful alternative to Skript and other scripting plugins.","Scripting runtime is based on LuaJava with LuaJIT. For more details on implementation specifics or differences, please refer to their respective documentation."]},{"l":"Features","p":["Quick and easy scripting with Lua syntax.","Full access to Bukkit API, built-in libraries and loaded plugins. (work in progress)","Create your own or load external Java and Lua libraries.","Loading and unloading of Lua scripts at runtime.","Built-in utilities to simplify common tasks."]},{"l":"Installation","p":["Before you begin, make sure you have met the following requirements:","Paper based server running 1.20 or higher, and Java 21.","Basic understanding of Lua scripting and general programming concepts is beneficial.","Plugin can be downloaded from following sources:","Modrinth (modrinth.com)","Hangar (hangar.papermc.io)","GitHub Releases (github.com)"]},{"l":"Quick Start","p":["After you have installed the plugin, you can start writing your first script.","Script life-cycle can be managed using /lualink load, /lualink unload and /lualink reload commands.","Each script is stored in a separate folder inside the plugins/LuaLink/scripts directory.","Entry point of the script is a file named main.lua.","It's quite simple, isn't it? For this particular case, we can simplify it even further by extracting the logic away from the onLoad block.","Want to do something more complex? More information on how to write scripts can be found on the Getting Started page."]}],[{"l":"Getting Started","p":["This page contains a basic introduction to writing Lua scripts with LuaLink.","It is important to know the basics of Java programming and Bukkit API because this is how you will interact with the Minecraft server.","Basic Lua knowledge is an obvious prerequisite, but it should be relatively easy to pick up assuming you have some experience with programming.","Lua (devdocs.io)","Java 21 (devdocs.io)","Paper Docs (docs.papermc.io)","Paper Javadocs (jd.papermc.io)","Navigation","1. Creating Scripts","2. Script Life-cycle","3. Importing and Requiring","4. Constructors and Instances","5. Commands","6. Events","7. Scheduler"]},{"l":"Creating Scripts","p":["There are a couple of things to keep in mind when using LuaLink.","Script life-cycle can be managed using /lualink load, /lualink unload and /lualink reload commands. More on this can be found on the Commands page.","Each script is stored in a separate folder inside the plugins/LuaLink/scripts directory, and libraries are stored in the plugins/LuaLink/libs directory. More about libraries can be found on the Libraries page.","Entry point of the script (or library) is a file named main.lua. More files can be created and loaded using the require keyword."]},{"l":"Script Life-cycle","p":["Scripts are automatically loaded after server has been fully started. They can also be loaded, unloaded or reloaded manually using commands."]},{"l":"Importing and Requiring","p":["Each referenced Java class must be imported using the import keyword.","Each referenced Lua class or library, must be required using the require keyword."]},{"l":"Constructors and Instances","p":["New instances of Java classes can be created as follows."]},{"l":"Commands","p":["Non-complex commands can be created with little effort using built-in API."]},{"l":"Events","p":["Bukkit events can be hooked into relatively easily."]},{"l":"Scheduler","p":["Scheduler can be used to register single-use, delayed or repeating tasks.","Tasks can also be run asynchronously, but please note that neither the Bukkit API nor the LuaLink API is guaranteed to be thread-safe."]}],[{"l":"Commands","p":["/lualink list","/lualink load (script)","/lualink reload (script)","/lualink unload (script)","Command","Description","List of all commands and permissions provided by LuaLink.","Lists all loaded Lua scripts.","Loads specified Lua script.","lualink.command.list","lualink.command.load","lualink.command.reload","lualink.command.unload","Permission","Please be cautious and give access to these commands only to people you trust.","Reloads specified Lua script.","Unloads specified Lua script."]}],[{"l":"Dependencies","p":["TO-DO"]}],[{"l":"Libraries","p":["LuaLink provides a way to load external Java libraries for use in your scripts, as well as to define and/or use external Lua libraries."]},{"l":"Lua Libraries","p":["External Lua libraries can be added by creating or copying files to the /plugins/LuaLink/libs/ folder.","This is an example of a Counter class that allows you to increment, decrement, and get the current value of a counter.","Now, if you want to use this class in your script, you can import it using the require keyword."]},{"l":"Example Lua Library"},{"l":"Java Libraries","p":["External Java/Kotlin libraries can be added by configuring the /plugins/LuaLink/libraries.json file. Dependencies will be downloaded and exposed to the scripting runtime after server restart."]},{"l":"Configuration Example","p":["In this example, we are adding stefvanschie's IF library of version 0.10.11 from Maven Central repository. You can also see how and authenticate with a private repository using credentials, which might be essential when working with closed-source projects or GitHub Packages.","After restarting the server, we should be able to import and access any class that belongs to specified library(-ies)."]}],[{"l":"Reference"},{"l":"Scheduler","p":["Provides methods to schedule and manage tasks. It supports both synchronous and asynchronous task execution with various timing options."]}]]